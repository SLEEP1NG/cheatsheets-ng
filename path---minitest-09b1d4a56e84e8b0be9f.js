webpackJsonp([0x5b82297dce4b],{902:function(e,t){e.exports={data:{markdownRemark:{htmlAst:{type:"root",children:[{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Usage"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'require \'minitest/autorun\'\n\ndescribe "X" do\n  before do .. end\n  after do .. end\n  subject { .. }\n  let(:list) { Array.new }\n\n  it "should work" do\n    assert true\n  end\nend\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Specs (.must/.wont)"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'expect(x)\n.must_be :==, 0\n.must_equal b\n.must_be_close_to 2.99999\n.must_be_same_as b\n\n.must_include needle\n.must_be_empty\n\n.must_be_kind_of\n.must_be_instance_of\n.must_be_nil\n.must_match /regex/\n.must_be :<=, 42\n.must_respond_to msg\n\n.must_be_silent  ( proc { "no stdout or stderr" }.must_be_silent)\n.must_output "hi"\n\nproc { ... }.must_output out_or_nil [, err]\nproc { ... }.must_raise exception\nproc { ... }.must_throw sym\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Unit::TestCase"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'class TestHipster < MiniTest::Unit::TestCase\n  def setup\n    @subject = ["silly hats", "skinny jeans"]\n  end\n\n  def teardown\n    @hipster.destroy!\n  end\n\n  def test_for_helvetica_font\n    assert_equal "helvetica!", @hipster.preferred_font\n  end\n\n  def test_not_mainstream\n    refute @hipster.mainstream?\n  end\nend\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Assertions"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'assert\nassert_block { ... }\nassert_empty\nassert_equal 2, @size\nassert_in_delta @size, 1, 1\nassert_in_epsilon\nassert_includes @list, "item"\nassert_instance_of Array, @list\nassert_kind_of Enumerable, @list\nassert_match @str, /regex/\nassert_nil\nassert_operator @n, :==, 0\nassert_output\nassert_raises\nassert_respond_to\nassert_same\nassert_send\nassert_silent\nassert_throws\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"MiniTest::Mock"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"A simple and clean mock system. There two essential methods at our disposal: expect and verify."}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'require \'minitest/autorun\'\n\ndescribe Twipster, "Make every tweet a hipster tweet." do\n  before do\n    @twitter  = MiniTest::Mock.new\n    @twipster = Twipster.new(@twitter)\n  end\n\n  it "should append a #lolhipster hashtag and update Twitter with our status" do\n    tweet = "Skyrim? Too mainstream."\n    @twitter.expect :update, true, ["#{tweet} #lolhipster"]\n    @twipster.submit(tweet)\n    assert @twitter.verify # verifies tweet and hashtag was passed to `@twitter.update`\n  end\nend\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Reporters"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"gem 'minitest-reporters'\n\nrequire 'minitest/reporters'\nMinitest::Reporters.use! Minitest::Reporters::SpecReporter.new\n\n[Default, Spec, Progress, RubyMate, RubyMine, JUnit]\n"}]}]}],data:{quirksMode:!1}},frontmatter:{title:"Minitest",category:"Ruby",intro:null}},relatedPages:{edges:[{node:{id:"SitePage /rbenv",context:{nodePath:"/rbenv",category:"Ruby",title:"rbenv"}}},{node:{id:"SitePage /activeadmin",context:{nodePath:"/activeadmin",category:"Ruby",title:"ActiveAdmin"}}},{node:{id:"SitePage /bundler",context:{nodePath:"/bundler",category:"Ruby",title:"Bundler"}}},{node:{id:"SitePage /rake",context:{nodePath:"/rake",category:"Ruby",title:"Rake"}}},{node:{id:"SitePage /rspec-rails",context:{nodePath:"/rspec-rails",category:"Ruby",title:"Rspec-rails"}}},{node:{id:"SitePage /rspec",context:{nodePath:"/rspec",category:"Ruby",title:"RSpec"}}}]},topPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /es6",context:{nodePath:"/es6",category:"JavaScript",title:"ES2015+"}}},{node:{id:"SitePage /react",context:{nodePath:"/react",category:"React",title:"React.js"}}},{node:{id:"SitePage /vimscript",context:{nodePath:"/vimscript",category:"Vim",title:"Vim scripting"}}},{node:{id:"SitePage /vim",context:{nodePath:"/vim",category:"Vim",title:"Vim"}}},{node:{id:"SitePage /capybara",context:{nodePath:"/capybara",category:"Ruby libraries",title:"Capybara"}}}]},allPages:{totalCount:363}},pathContext:{node_id:"/home/rsc/Dev/@devhints/cheatsheets-ng/sheets/minitest.md absPath of file >>> MarkdownRemark",nodePath:"/minitest",nodeType:"sheet",title:"Minitest",category:"Ruby",weight:0,updated:null}}}});
//# sourceMappingURL=path---minitest-09b1d4a56e84e8b0be9f.js.map