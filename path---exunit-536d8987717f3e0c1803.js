webpackJsonp([44205693179031],{801:function(e,t){e.exports={data:{markdownRemark:{htmlAst:{type:"element",tagName:"div",properties:{},children:[{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Test cases"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'defmodule MyTest do\n  use ExUnit.Case\n  use ExUnit.Case, async: true  # for async\n\n  test "the truth" do\n    assert 1 + 1 == 2\n  end\nend\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Capture IO"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'import ExUnit.CaptureIO\n\ntest "capture io" do\n  result = capture_io(fn ->\n    IO.puts "sup"\n  end)\n\n  assert result == "sup\\n"\nend\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Capture logs"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:"config :ex_unit, capture_logs: true\n"}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Async"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:"defmodule AssertionTest do\n  # run concurrently with other test cases\n  use ExUnit.Case, async: true\nend\n"}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Assertions"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'assert x == y\nrefute x == y\n\nassert_raise ArithmeticError, fn ->\n  1 + "test"\nend\n\nassert_raise ArithmeticError, "message", fn -> ...\nassert_raise ArithmeticError, ~r/message/, fn -> ...\n\nflunk "This should\'ve been an error"\n'}]}]},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"See: "},{type:"element",tagName:"a",properties:{href:"http://devdocs.io/elixir/ex_unit/exunit.assertions"},children:[{type:"text",value:"Assertions"}]}]},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Setup"}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Pattern matching"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'setup do\n  {:ok, name: "John"}\nend\n'}]}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'test "it works", %{name: name} do\n  assert name == "John"\nend\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Setup"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'describe "a block" do\n  setup [:my_hook]\nend\n\ndefp my_hook(context) do\n  # Invoked in every block in "a block"\nend\n'}]}]},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Also see"}]},{type:"comment",value:" {.-one-column} "},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"http://devdocs.io/elixir/ex_unit/exunit#configure/1"},children:[{type:"text",value:"http://devdocs.io/elixir/ex_unit/exunit#configure/1"}]}]},{type:"text",value:"\n"}]}]},frontmatter:{title:"ExUnit",category:"Elixir",intro:null}},relatedPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /phoenix-conn",context:{nodePath:"/phoenix-conn",category:"Elixir",title:"Phoenix: Plug.Conn"}}},{node:{id:"SitePage /ets",context:{nodePath:"/ets",category:"Elixir",title:"Erlang ETS"}}},{node:{id:"SitePage /phoenix-migrations",context:{nodePath:"/phoenix-migrations",category:"Elixir",title:"Phoenix: Ecto migrations"}}},{node:{id:"SitePage /phoenix-routing",context:{nodePath:"/phoenix-routing",category:"Elixir",title:"Phoenix: Routing"}}},{node:{id:"SitePage /phoenix",context:{nodePath:"/phoenix",category:"Elixir",title:"Phoenix"}}}]},topPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /es6",context:{nodePath:"/es6",category:"JavaScript",title:"ES2015+"}}},{node:{id:"SitePage /react",context:{nodePath:"/react",category:"React",title:"React.js"}}},{node:{id:"SitePage /vim",context:{nodePath:"/vim",category:"Vim",title:"Vim"}}},{node:{id:"SitePage /vimscript",context:{nodePath:"/vimscript",category:"Vim",title:"Vim scripting"}}},{node:{id:"SitePage /capybara",context:{nodePath:"/capybara",category:"Ruby libraries",title:"Capybara"}}}]},allPages:{totalCount:365}},pathContext:{node_id:"/home/rsc/Dev/@devhints/cheatsheets-ng/sheets/exunit.md absPath of file >>> MarkdownRemark",nodePath:"/exunit",nodeType:"sheet",title:"ExUnit",category:"Elixir",weight:0,updated:"2017-08-26T00:00:00.000Z"}}}});
//# sourceMappingURL=path---exunit-536d8987717f3e0c1803.js.map