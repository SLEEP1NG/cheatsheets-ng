webpackJsonp([38130118470070],{976:function(e,t){e.exports={data:{markdownRemark:{htmlAst:{type:"element",tagName:"div",properties:{},children:[{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Schemas"}]},{type:"comment",value:" {.-three-column} "},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Generating"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-bash"]},children:[{type:"text",value:"$ mix phx.gen.html \\\n    Accounts \\       # domain\n    Profile \\        # schema\n    profiles \\       # table name\n    email:string \\\n    age:integer\n"}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Schema"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'defmodule Myapp.Accounts.User do\n  use Ecto.Schema\n\n  schema "users" do\n    field :name\n    field :age, :integer\n    field :password, virtual: true\n\n    timestamps()\n  end\nend\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Field types"}]},{type:"text",value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:"element",tagName:"table",properties:{},children:[{type:"element",tagName:"thead",properties:{},children:[{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"th",properties:{},children:[{type:"text",value:"Field"}]}]}]},{type:"element",tagName:"tbody",properties:{},children:[{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":id"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":binary"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":boolean"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":string"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"text",value:"---"}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":integer"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":float"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":decimal"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"text",value:"---"}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"{:array, inner_type}"}]}]}]},{type:"element",tagName:"tr",properties:{},children:[{type:"element",tagName:"td",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:":map"}]}]}]}]}]},{type:"comment",value:" {.-left-align} "},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Changesets"}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Changesets"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'def changeset(user, params \\\\ :empty) do\n  %User{}\n  |> Ecto.Changeset.change   # basic casting to changeset\n\n  user\n  |> cast(params, ~w(name email), ~w(age)) # params to Changeset\n\n  |> validate_format(:email, ~r/@/)\n\n  |> validate_inclusion(:age, 18..100)\n  |> validate_exclusion(:role, ~w(admin superadmin))\n  |> validate_subset(:pets, ~w(cat dog parrot whale))\n\n  |> validate_length(:body, min: 1)\n  |> validate_length(:body, min: 1, max: 160)\n  |> validate_length(:partners, is: 2)\n\n  |> validate_number(:pi, greater_than: 3)\n  |> validate_number(:pi, less_than: 4)\n  |> validate_number(:pi, equal_to: 42)\n\n  |> validate_change(:title, fn _, _ -> [])\n  |> validate_confirmation(:password, message: "does not match")\n\n  |> unique_constraint(:email)\n  |> foreign_key_constraint(:post_id)\n  |> assoc_constraint(:post)      # ensure post_id exists\n  |> no_assoc_constraint(:post)   # negative (useful for deletions)\nend\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Changeset fields"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'changeset.valid?\nchangeset.errors     #=> [title: "empty"]\n\nchangeset.changes    #=> %{}\nchangeset.params[:title]\n\nchangeset.required   #=> [:title]\nchangeset.optional   #=> [:body]\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Updating"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'changeset #(or model)\n|> change(title: "New title")\n|> change(%{ title: "New title" })\n|> put_change(:title, "New title")\n|> force_change(:title, "New title")\n|> update_change(:title, &(&1 <> "..."))\n\n|> delete_change(:title)\n|> merge(other_changeset)\n\n|> add_error(:title, "empty")\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Getting"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'get_change(changeset, :title)    #=> "hi" (if changed)\nget_field(changeset, :title)     #=> "hi" (even if unchanged)\n\nfetch_change(changeset, :title)  #=> {:ok, "hi"} | :error\nfetch_field(changeset, :title)   #=> {:changes | :model, "value"} | :error\n'}]}]},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Repo"}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Get one"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'Repo.get(User, id)\nRepo.get_by(User, email: "john@hello.com")  #=> %User{} | nil\n\n# also get! get_by!\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Create/update"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:"changeset |> Repo.update\nchangeset |> Repo.insert\nchangeset |> Repo.insert_or_update\n"}]}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'User\n|> Ecto.Changeset.change(%{name: "hi"})\n|> Repo.insert\n'}]}]},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Many"}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Queries"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'from p in Post,\n  where: p.title == "Hello",\n  where: [state: "Sweden"],\n\n  limit: 1,\n  offset: 10,\n\n  order_by: c.name,\n  order_by: [c.name, c.title],\n  order_by: [asc: c.name, desc: c.title],\n\n  preload: [:comments],\n  preload: [comments: {c, likes: l}],\n\n  join: c in assoc(c, :comments),\n  join: p in Post, on: c.post_id == p.id,\n  group_by: p,\n\n  select: p,\n  select: {p.title, p.description},\n  select: [p.title, p.description],\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Get many"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:"Repo.all(User)\n"}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Update many"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:'Repo.update_all(Post, set: [title: "Title"])\nRepo.update_all(Post, inc: [views: 1])\n'}]}]},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Chaining "},{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"_all"}]},{type:"text",value:" with queries"}]},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-elixir"]},children:[{type:"text",value:"from(p in Post, where: p.id < 10)\n|> Repo.update_all(...)\n\nfrom(p in Post, where: p.id < 10)\n|> Repo.all()\n"}]}]},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"References"}]},{type:"comment",value:" {.-one-column} "},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Based on Ecto 1.3."}]},{type:"text",value:"\n"}]}]},frontmatter:{title:"Phoenix: Ecto",category:"Elixir",intro:null}},relatedPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /phoenix-conn",context:{nodePath:"/phoenix-conn",category:"Elixir",title:"Phoenix: Plug.Conn"}}},{node:{id:"SitePage /ets",context:{nodePath:"/ets",category:"Elixir",title:"Erlang ETS"}}},{node:{id:"SitePage /phoenix-migrations",context:{nodePath:"/phoenix-migrations",category:"Elixir",title:"Phoenix: Ecto migrations"}}},{node:{id:"SitePage /phoenix-routing",context:{nodePath:"/phoenix-routing",category:"Elixir",title:"Phoenix: Routing"}}},{node:{id:"SitePage /phoenix",context:{nodePath:"/phoenix",category:"Elixir",title:"Phoenix"}}}]},topPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /es6",context:{nodePath:"/es6",category:"JavaScript",title:"ES2015+"}}},{node:{id:"SitePage /react",context:{nodePath:"/react",category:"React",title:"React.js"}}},{node:{id:"SitePage /vim",context:{nodePath:"/vim",category:"Vim",title:"Vim"}}},{node:{id:"SitePage /vimscript",context:{nodePath:"/vimscript",category:"Vim",title:"Vim scripting"}}},{node:{id:"SitePage /capybara",context:{nodePath:"/capybara",category:"Ruby libraries",title:"Capybara"}}}]},allPages:{totalCount:366}},pathContext:{node_id:"/home/rsc/Dev/@devhints/cheatsheets-ng/sheets/phoenix-ecto.md absPath of file >>> MarkdownRemark",nodePath:"/phoenix-ecto",nodeType:"sheet",title:"Phoenix: Ecto",category:"Elixir",weight:0,updated:"2017-08-29T00:00:00.000Z"}}}});
//# sourceMappingURL=path---phoenix-ecto-6c89c067342d96e4ec04.js.map