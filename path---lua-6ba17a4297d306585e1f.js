webpackJsonp([64058531305615],{884:function(e,t){e.exports={data:{markdownRemark:{htmlAst:{type:"root",children:[{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Comments"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"-- comment\n--[[ Multiline\n     comment ]]\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Invoking functions"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'print()\nprint("Hi")\n\n-- You can omit parentheses if the argument is one string or table literal\nprint "Hello World"     <-->     print("Hello World")\ndofile \'a.lua\'          <-->     dofile (\'a.lua\')\nprint [[a multi-line    <-->     print([[a multi-line\n message]]                        message]])\nf{x=10, y=20}           <-->     f({x=10, y=20})\ntype{}                  <-->     type({})\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Tables / arrays"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'t = {}\nt = { a = 1, b = 2 }\nt.a = function() ... end\n\nt = { ["hello"] = 200 }\nt.hello\n\n-- Remember, arrays are also tables\narray = { "a", "b", "c", "d" }\nprint(array[2])       -- "b" (zero-indexed)\nprint(#array)         -- 4 (length)\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Loops"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"while condition do\nend\n\nfor i = 1,5 do\nend\n\nfor i = start,finish,delta do\nend\n\nfor k,v in pairs(tab) do\nend\n\nrepeat\nuntil condition\n\n-- Breaking out:\nwhile x do\n  if condition then break end\nend\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Conditionals"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'if condition then\n  print("yes")\nelsif condition then\n  print("maybe")\nelse\n  print("no")\nend\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Variables"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"local x = 2\ntwo, four = 2, 4\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Functions"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'function myFunction()\n  return 1\nend\n\nfunction myFunctionWithArgs(a, b)\n  -- ...\nend\n\nmyFunction()\n\nanonymousFunctions(function()\n  -- ...\nend)\n\n-- Not exported in the module\nlocal function myPrivateFunction()\nend\n\n-- Splats\nfunction doAction(action, ...)\n  print("Doing \'"..action.."\' to", ...)\n  --> print("Doing \'write\' to", "Shirley", "Abed")\nend\n\ndoAction(\'write\', "Shirley", "Abed")\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Lookups"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"mytable = { x = 2, y = function() .. end }\n\n-- The same:\nmytable.x\nmytable['x']\n\n-- Syntactic sugar, these are equivalent:\nmytable.y(mytable)\nmytable:y()\n\nmytable.y(mytable, a, b)\nmytable:y(a, b)\n\nfunction X:y(z) .. end\nfunction X.y(self, z) .. end\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Metatables"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'mt = {}\n\n-- A metatable is simply a table with functions in it.\nmt.__tostring = function() return "lol" end\nmt.__add      = function(b) ... end       -- a + b\nmt.__mul      = function(b) ... end       -- a * b\nmt.__index    = function(k) ... end       -- Lookups (a[k] or a.k)\nmt.__newindex = function(k, v) ... end    -- Setters (a[k] = v)\n\n-- Metatables allow you to override behavior of another table.\nmytable = {}\nsetmetatable(mytable, mt)\n\nprint(myobject)\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Classes"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'Account = {}\n\nfunction Account:new(balance)\n  local t = setmetatable({}, { __index = Account })\n\n  -- Your constructor stuff\n  t.balance = (balance or 0)\n  return t\nend\n\nfunction Account:withdraw(amount)\n  print("Withdrawing "..amount.."...")\n  self.balance = self.balance - amount\n  self:report()\nend\n\nfunction Account:report()\n  print("Your current balance is: "..self.balance)\nend\n\na = Account:new(9000)\na:withdraw(200)    -- method call\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Constants"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"nil\nfalse\ntrue\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Operators (and their metatable names)"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'-- Relational (binary)\n-- __eq  __lt  __gt  __le  __ge\n   ==    <     >     <=    >=\n~=   -- Not equal, just like !=\n\n-- Arithmetic (binary)\n-- __add  __sub  __muv  __div  __mod  __pow\n   +      -      *      /      %      ^\n\n-- Arithmetic (unary)\n-- __unm (unary minus)\n   -\n\n-- Logic (and/or)\nnil and 10     --> 10\nfalse and nil  --> false\n10 and 20      --> 20\n\n\n-- Length\n-- __len(array)\n#array\n\n\n-- Indexing\n-- __index(table, key)\nt[key]\nt.key\n\n-- __newindex(table, key, value)\nt[key]=value\n\n-- String concat\n-- __concat(left, right)\n"hello, "..name\n\n-- Call\n-- __call(func, ...)\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"API: Global functions  "},{type:"element",tagName:"a",properties:{href:"http://lua.gts-stolberg.de/en/Basis.php"},children:[{type:"text",value:"(ref)"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'dofile("hello.lua")\nloadfile("hello.lua")\n\nassert(x)    -- x or (raise an error)\nassert(x, "failed")\n\ntype(var)   -- "nil" | "number" | "string" | "boolean" | "table" | "function" | "thread" | "userdata"\n\n-- Does /not/ invoke meta methods (__index and __newindex)\nrawset(t, index, value)    -- Like t[index] = value\nrawget(t, index)           -- Like t[index]\n\n_G  -- Global context\nsetfenv(1, {})  -- 1: current function, 2: caller, and so on -- {}: the new _G\n\npairs(t)     -- iterable list of {key, value}\nipairs(t)    -- iterable list of {index, value}\n\ntonumber("34")\ntonumber("8f", 16)\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"API: Strings"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"'string'..'concatenation'\n\ns = \"Hello\"\ns:upper()\ns:lower()\ns:len()    -- Just like #s\n\ns:find()\ns:gfind()\n\ns:match()\ns:gmatch()\n\ns:sub()\ns:gsub()\n\ns:rep()\ns:char()\ns:dump()\ns:reverse()\ns:byte()\ns:format()\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"API: Tables"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"table.foreach(t, function(row) ... end)\ntable.setn\ntable.insert(t, 21)          -- append (--> t[#t+1] = 21)\ntable.insert(t, 4, 99)\ntable.getn\ntable.concat\ntable.sort\ntable.remove(t, 4)\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"API: Math "},{type:"element",tagName:"a",properties:{href:"http://lua-users.org/wiki/MathLibraryTutorial"},children:[{type:"text",value:"(ref)"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:"math.abs     math.acos    math.asin       math.atan    math.atan2\nmath.ceil    math.cos     math.cosh       math.deg     math.exp\nmath.floor   math.fmod    math.frexp      math.ldexp   math.log\nmath.log10   math.max     math.min        math.modf    math.pow\nmath.rad     math.random  math.randomseed math.sin     math.sinh\nmath.sqrt    math.tan     math.tanh\n\nmath.sqrt(144)\nmath\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"API: Misc"}]},{type:"text",value:"\n"},{type:"element",tagName:"pre",properties:{},children:[{type:"element",tagName:"code",properties:{},children:[{type:"text",value:'io.output(io.open("file.txt", "w"))\nio.write(x)\nio.close()\n\nfor line in io.lines("file.txt")\n\nfile = assert(io.open("file.txt", "r"))\nfile:read()\nfile:lines()\nfile:close()\n'}]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Reference"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"  "},{type:"element",tagName:"a",properties:{href:"http://www.lua.org/pil/13.html"},children:[{type:"text",value:"http://www.lua.org/pil/13.html"}]},{type:"text",value:"\n"},{type:"element",tagName:"a",properties:{href:"http://lua-users.org/wiki/ObjectOrientedProgramming"},children:[{type:"text",value:"http://lua-users.org/wiki/ObjectOrientedProgramming"}]}]}],data:{quirksMode:!1}},frontmatter:{title:"Lua",category:null,intro:null}},relatedPages:{edges:[{node:{id:"SitePage /datetime",context:{nodePath:"/datetime",category:"",title:"Date & time formats"}}},{node:{id:"SitePage /strftime",context:{nodePath:"/strftime",category:"",title:"strftime format"}}},{node:{id:"SitePage /go",context:{nodePath:"/go",category:"",title:"Go"}}},{node:{id:"SitePage /homebrew",context:{nodePath:"/homebrew",category:"",title:"Homebrew"}}},{node:{id:"SitePage /semver",context:{nodePath:"/semver",category:"",title:"Semver"}}},{node:{id:"SitePage /bootstrap",context:{nodePath:"/bootstrap",category:"",title:"Bootstrap"}}}]},topPages:{edges:[{node:{id:"SitePage /elixir",context:{nodePath:"/elixir",category:"Elixir",title:"Elixir"}}},{node:{id:"SitePage /es6",context:{nodePath:"/es6",category:"JavaScript",title:"ES2015+"}}},{node:{id:"SitePage /react",context:{nodePath:"/react",category:"React",title:"React.js"}}},{node:{id:"SitePage /vim",context:{nodePath:"/vim",category:"Vim",title:"Vim"}}},{node:{id:"SitePage /vimscript",context:{nodePath:"/vimscript",category:"Vim",title:"Vim scripting"}}},{node:{id:"SitePage /capybara",context:{nodePath:"/capybara",category:"Ruby libraries",title:"Capybara"}}}]},allPages:{totalCount:364}},pathContext:{node_id:"/home/rsc/Dev/@devhints/cheatsheets-ng/sheets/lua.md absPath of file >>> MarkdownRemark",nodePath:"/lua",nodeType:"sheet",title:"Lua",category:"",weight:0,updated:null}}}});
//# sourceMappingURL=path---lua-6ba17a4297d306585e1f.js.map